{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//getInitialProps가 거의 안쓰이고 getStatic / getserverside Props로 바뀜\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n\n//async action creator : redux saga\n\n//action creator\nvar changeNickname = function changeNickname(data) {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data: data\n  };\n};\n//액션함수로 액션 만들기\nchangeNickname(\"chuchu\");\n// {\n//     type : \"CHANGE_NICKNAME\",\n//     data : 'chuchu'\n// }\n\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\n// store.dispatch(changeNickname('shushu'))\n\n//(이전 상태 , 액션) => 다음 상태\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log(\"HYDRATE\", action);\n//       return { ...state, ...action.payload };\n\n//     default:\n//       return state;//없으면 초기화시 리턴값이 언디파인드가 뜨므로 필요\n//   }\n// };\nvar rootReducer = combineReducers({\n  //각 리듀서를 합쳐주는 combineReducers - redux\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    //hydrate를 위한 리듀서\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","combineReducers","initialState","isLoggedIn","signUpData","loginData","mainPosts","changeNickname","data","type","rootReducer","index","state","action","console","log","payload"],"sources":["C:/Users/pc/Desktop/code/JeroCho/react-nodebird/prepare/front/reducers/index.js"],"sourcesContent":["//getInitialProps가 거의 안쓰이고 getStatic / getserverside Props로 바뀜\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\n//async action creator : redux saga\r\n\r\n//action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data,\r\n  };\r\n};\r\n//액션함수로 액션 만들기\r\nchangeNickname(\"chuchu\");\r\n// {\r\n//     type : \"CHANGE_NICKNAME\",\r\n//     data : 'chuchu'\r\n// }\r\n\r\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\r\n// store.dispatch(changeNickname('shushu'))\r\n\r\n//(이전 상태 , 액션) => 다음 상태\r\n// const rootReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case HYDRATE:\r\n//       console.log(\"HYDRATE\", action);\r\n//       return { ...state, ...action.payload };\r\n\r\n//     default:\r\n//       return state;//없으면 초기화시 리턴값이 언디파인드가 뜨므로 필요\r\n//   }\r\n// };\r\nconst rootReducer = combineReducers({ //각 리듀서를 합쳐주는 combineReducers - redux\r\n  index: (state = {}, action) => { //hydrate를 위한 리듀서\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"],"mappings":";;;AAAA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,eAAe,QAAQ,OAAO;AAEvC,IAAMC,YAAY,GAAG;EACnBH,IAAI,EAAE;IACJI,UAAU,EAAE,KAAK;IACjBJ,IAAI,EAAE,IAAI;IACVK,UAAU,EAAE,CAAC,CAAC;IACdC,SAAS,EAAE,CAAC;EACd,CAAC;EACDL,IAAI,EAAE;IACJM,SAAS,EAAE;EACb;AACF,CAAC;;AAED;;AAEA;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAI,EAAK;EAC/B,OAAO;IACLC,IAAI,EAAE,iBAAiB;IACvBD,IAAI,EAAJA;EACF,CAAC;AACH,CAAC;AACD;AACAD,cAAc,CAAC,QAAQ,CAAC;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAMG,WAAW,GAAGT,eAAe,CAAC;EAAE;EACpCU,KAAK,EAAE,iBAAwB;IAAA,IAAvBC,KAAK,uEAAG,CAAC,CAAC;IAAA,IAAEC,MAAM;IAAO;IAC/B,QAAQA,MAAM,CAACJ,IAAI;MACjB,KAAKX,OAAO;QACVgB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;QAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACG,OAAO;MAEtC;QACE,OAAOJ,KAAK;IAAC;EAEnB,CAAC;EACDb,IAAI,EAAJA,IAAI;EACJC,IAAI,EAAJA;AACF,CAAC,CAAC;AAEF,eAAeU,WAAW"},"metadata":{},"sourceType":"module"}