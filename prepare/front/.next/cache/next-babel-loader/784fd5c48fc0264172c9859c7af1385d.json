{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n//getInitialProps가 거의 안쓰이고 getStatic / getserverside Props로 바뀜 \nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n\n//async action creator : redux saga\n\n//action creator\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\n//액션함수로 액션 만들기\nchangeNickname(\"chuchu\");\n// {\n//     type : \"CHANGE_NICKNAME\",\n//     data : 'chuchu'\n// }\n\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\n// store.dispatch(changeNickname('shushu'))\n\n//(이전 상태 , 액션) => 다음 상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log(\"HYDRATE\", action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    default:\n      return state;\n    //없으면 초기화시 리턴값이 언디파인드가 뜨므로 필요\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","initialState","isLoggedIn","signUpData","loginData","post","mainPosts","changeNickname","data","type","rootReducer","state","action","console","log","payload"],"sources":["C:/Users/pc/Desktop/code/JeroCho/react-nodebird/prepare/front/reducers/index.js"],"sourcesContent":["//getInitialProps가 거의 안쓰이고 getStatic / getserverside Props로 바뀜 \r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from './'\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\n//async action creator : redux saga\r\n\r\n//action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data,\r\n  };\r\n};\r\n//액션함수로 액션 만들기\r\nchangeNickname(\"chuchu\");\r\n// {\r\n//     type : \"CHANGE_NICKNAME\",\r\n//     data : 'chuchu'\r\n// }\r\n\r\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\r\n// store.dispatch(changeNickname('shushu'))\r\n\r\n//(이전 상태 , 액션) => 다음 상태\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      console.log(\"HYDRATE\", action);\r\n      return { ...state, ...action.payload };\r\n    \r\n\r\n    default:\r\n      return state;//없으면 초기화시 리턴값이 언디파인드가 뜨므로 필요\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":";;;AAAA;AACA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,OAAOC,IAAI,MAAM,IAAI;AAErB,MAAMC,YAAY,GAAG;EACnBD,IAAI,EAAE;IACJE,UAAU,EAAE,KAAK;IACjBF,IAAI,EAAE,IAAI;IACVG,UAAU,EAAE,CAAC,CAAC;IACdC,SAAS,EAAE,CAAC;EACd,CAAC;EACDC,IAAI,EAAE;IACJC,SAAS,EAAE;EACb;AACF,CAAC;;AAED;;AAEA;AACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC/B,OAAO;IACLC,IAAI,EAAE,iBAAiB;IACvBD;EACF,CAAC;AACH,CAAC;AACD;AACAD,cAAc,CAAC,QAAQ,CAAC;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGV,YAAY,EAAEW,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACH,IAAI;IACjB,KAAKV,OAAO;MACVc,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;MAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACG,OAAO;IAGtC;MACE,OAAOJ,KAAK;IAAC;EAAA;AAEnB,CAAC;;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}