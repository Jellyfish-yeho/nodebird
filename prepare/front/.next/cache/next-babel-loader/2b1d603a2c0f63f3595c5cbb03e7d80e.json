{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n//로그인 액션 크리에이터 함수\nexport const loginAction = data => {\n  return {\n    type: \"LOG_IN\",\n    data\n  };\n};\n//로그아웃 액션 크리에이터 함수\nexport const logoutAction = () => {\n  return {\n    type: \"LOG_OUT\"\n  };\n};\n//async action creator : redux saga\n\n//action creator\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\n//액션함수로 액션 만들기\nchangeNickname(\"chuchu\");\n// {\n//     type : \"CHANGE_NICKNAME\",\n//     data : 'chuchu'\n// }\n\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\n// store.dispatch(changeNickname('shushu'))\n\n//(이전 상태 , 액션) => 다음 상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","rootReducer","state","action"],"sources":["C:/Users/pc/Desktop/code/JeroCho/react-nodebird/prepare/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n//로그인 액션 크리에이터 함수\r\nexport const loginAction = (data) => {\r\n  return {\r\n    type: \"LOG_IN\",\r\n    data,\r\n  };\r\n};\r\n//로그아웃 액션 크리에이터 함수\r\nexport const logoutAction = () => {\r\n  return {\r\n    type: \"LOG_OUT\",\r\n  };\r\n};\r\n//async action creator : redux saga\r\n\r\n//action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data,\r\n  };\r\n};\r\n//액션함수로 액션 만들기\r\nchangeNickname(\"chuchu\");\r\n// {\r\n//     type : \"CHANGE_NICKNAME\",\r\n//     data : 'chuchu'\r\n// }\r\n\r\n//만들어낸 액션은 디스패치로 컴포넌트에서 사용하기\r\n// store.dispatch(changeNickname('shushu'))\r\n\r\n//(이전 상태 , 액션) => 다음 상태\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LOG_IN\":\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: true,\r\n          user: action.data,\r\n        },\r\n      };\r\n    case \"LOG_OUT\":\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        },\r\n      };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,UAAU,EAAE,KAAK;IACjBD,IAAI,EAAE,IAAI;IACVE,UAAU,EAAE,CAAC,CAAC;IACdC,SAAS,EAAE,CAAC;EACd,CAAC;EACDC,IAAI,EAAE;IACJC,SAAS,EAAE;EACb;AACF,CAAC;AACD;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAO;IACLC,IAAI,EAAE,QAAQ;IACdD;EACF,CAAC;AACH,CAAC;AACD;AACA,OAAO,MAAME,YAAY,GAAG,MAAM;EAChC,OAAO;IACLD,IAAI,EAAE;EACR,CAAC;AACH,CAAC;AACD;;AAEA;AACA,MAAME,cAAc,GAAIH,IAAI,IAAK;EAC/B,OAAO;IACLC,IAAI,EAAE,iBAAiB;IACvBD;EACF,CAAC;AACH,CAAC;AACD;AACAG,cAAc,CAAC,QAAQ,CAAC;AACxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGb,YAAY,EAAEc,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACL,IAAI;IACjB,KAAK,QAAQ;MACX,uCACKI,KAAK;QACRZ,IAAI,kCACCY,KAAK,CAACZ,IAAI;UACbC,UAAU,EAAE,IAAI;UAChBD,IAAI,EAAEa,MAAM,CAACN;QAAI;MAClB;IAEL,KAAK,SAAS;MACZ,uCACKK,KAAK;QACRZ,IAAI,kCACCY,KAAK,CAACZ,IAAI;UACbC,UAAU,EAAE,KAAK;UACjBD,IAAI,EAAE;QAAI;MACX;EACD;AAER,CAAC;AAED,eAAeW,WAAW"},"metadata":{},"sourceType":"module"}